-- subst
rec subst = \v . \e . \t . case t of
  { Apply(e0, e1)  -> Apply(subst v e e0, subst(v, e, e1))
  , Lambda(v0, e0) -> bool(Lambda(v0, subst(v, e, e0)), t, equal(v, v0))
  , Case(e0, bs)   -> Case(subst v e e0, map substB bs)
  , Rec(v0, e0)    -> bool(Rec(v0, subst(v, e, e0)), t, equal(v, v0))
  , Var(v0)        -> bool(t, e, equal(v, v0))
  , Const(c, es)   -> Const(c, map(\x . subst(v, e, x), es))
  }

-- equal
\a . \b -> case a of
  { Zero()   -> case b of
    { Zero()   -> True()
    , Succ(b') -> False()
    }
  , Succ(a') -> case b of
    { Zero()   -> False()
    , Succ(b') -> equal(a', b')
    }
  }

-- substB
\b . case b of
  { Branch(c, vs, e1) -> bool(b, Branch(c, vs, subst v e e1), elem(v, vs))
  }

-- bool
\f . \t . \cond . case cond of
  { False() -> f
  , True()  -> t
  }

-- elem
\a . \t . case xs of
  { Nil() -> False()
  , Cons(x, xs) -> bool(elem(a, xs), True(), equal(a, x))
  }

-- map
\f . \xs -> case xs of
  { Nil()       -> Nil()
  , Cons(x, xs) -> Cons(f(x), map(f, xs))
  }
